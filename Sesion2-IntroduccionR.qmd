---
title: "**<b style = 'color : #E34B2A;'>Sesión 2: Introducción al R y Rstudio</b>**"
subtitle: 'Taller de Investigación: Política Cuantitativa "CUANTIPOL" - UNMSM'
author: "Asesor: Joel Belsasar Ccallocunto \n **[@luccemhu](https://github.com/luccemhu)** \n a20196510@pucp.edu.pe"
date: "2023-6-4"
theme:
  dark: darkly
  light: flatly
toc: true
always_allow_html: true
format:
  html:
    mainfont: Georgia
    self-contained: true
---

```{r,echo=FALSE, out.width="65%",fig.align="center"}
knitr::include_graphics("logoCUANTIPOL.png")  # Para plotear cualquier imagen
# Puedes centrar, aumentar o disminuir el tamaño del gráfico (buscar códigos en internet) 
```

*Hola con todas y todos, me llamo Joel, soy de Ayacucho, estoy en el septimo ciclo de la carrera de ciencia politica y gobierno. y hoy voy a presentarles una introduccion a R*

*RECOMENDACIONES INICIALES: SÉ QUE PUEDE SER ABRUMADOR porque ES APRENDER UN LENGUAJE NUEVO, O SEA, NO VA A SER FACIL. pero el PROGRAMA es MUY INTUTIVO y además yo y mis compañeros y compañeras les vamos a ayudar*

*practicar los ejercicios: COMPRENDER MEJOR: CURIOSIDAD e intuicion*

*Y CUALQUIER DUDA, PREGUNTEN POR EL CHAT, POR PRIVADO O PRENDAN EL MICROFONO O TAMBIÉN PUEDEN ENVIARME UN CORREO*

*ENTONCES*

¿Qué buscamos con el taller?
============================================================

- Familiarizarnos con el lenguaje, el uso de R y explorar los formas más comunes y útiles para el análisis de datos.

- No es un curso exhaustivo que cubra todas las aplicaciones y posibilidades que se pueden aprovechar con R.

*Vamos a tratar de hablar "todos el mismo idioma" es decir trabajar sobre los fundamentos DE R, y así les permitirá ampliar sus conocimientos DE R en función de los usos que deseen o necesiten darle.*

*La estrategia consistirá en abordar los conceptos principales y proporcionar una visión general de temas más avanzados o específicos como punto de partida, que les permita profundizar la investigación que desarrollen a lo largo del curso.*

*Además, les compartiré algunos consejos prácticos y atajos que hubiera deseado conocer cuando comencé con R, y que espero les resulten muy útiles y beneficiosos.*

*El siguiente objetivo del taller es su*

- Proyecto final del taller:

  - Ejemplos...

    - En Github: [Determinantes del desempleo juvenil en el mundo](https://luccemhu.github.io/) (CAMBIAR EL NOMBRE DE ESTO JOEL)

    - En Rpubs: [¿Los países productores de petróleo son los Estados más contaminantes?](https://rpubs.com/LuchoValverde/920711)


Repasemos la instalación...
============================================================

Configurar el directorio de trabajo
============================================================

- Es fundamental considerar la ubicación de los archivos al importar y exportar nuestros datos. Esta carpeta, en la que se cargan los archivos, se conoce como "Working directory" o directorio de trabajo.

*R funciona como un entorno de trabajo temporal en el cual el usuario puede añadir datos y objetos. Sin embargo, si los análisis no se guardan, será necesario repetir las instrucciones para obtener los resultados nuevamente. Por esta razón, es importante configurar una carpeta predeterminada en nuestro ordenador. De este modo, el programa buscará los archivos que se deben ejecutar y guardará los archivos modificados en esa ubicación específica.*

- Para encontrar nuestro lugar actual directorio de trabajo o el "Set Working Directory", debemos correr el siguiente comando en la consola: `getwd()` (sin las comillas invertidas). Si ejecuta este comando desde un archivo Rmd, obtendrá la ubicación del archivo script actual.

- Para cambiar nuestro directorio de trabajo a uno específico, podemos utilizar la siguiente función:

````markdown
setwd() # Establecer el nuevo directorio de trabajo
dir() # Ver qué archivos están en el directorio de trabajo o en el lugar en que se encuentre
````

- Otra opción para establecer nuestro directorio de trabajo:

  - Nos dirigirnos al menú superior y seleccionamos las siguientes pestañas: “Session” \> “Set Working Directory” \> “Choose Directory”. Esto abrirá una ventana emergente, en la que podemos buscar la carpeta en la cual deseamos trabajar. Una vez ubicada, la seleccionamos y hacemos clic en "Open". Para verificar el cambio, volvemos a ejecutar la función `getwd()` en la consola.

- Si necesitamos importar, por ejemplo, una base de datos desde otra subcarpeta:

````markdown
library(rio)
data = import("./pavimentandoconvotos.sav") 
 ./ El punto + slash indica que importaremos la base de una subcarpeta 
````

- Luego aprenderán otros modos para importar bases de datos directamente desde internet. 

¿Qué es R?
============================================================

- R es un lenguaje y software que permite análisis estadísticos y gráficos.

  - Lenguaje porque posee su propia sintaxis, a partir de la cual se pueden escribir sentencias y comandos.

  - Es un software porque es al mismo tiempo un programa con múltiples funcionalidades

## ... ¿Y RStudio?

- Rstudio es un "integrated development environment" - [IDE](https://posit.co/products/open-source/rstudio/): un interfaz amigable y poderoso para trabajar con R.

*es un entorno de desarrollo integrado para R o como se indica en la pagina de posit, “un set de herramientas integradas para ayudar a ser más productivo con R”*

Pero si hay más softwares estadísticos, ¿por qué usamos (o deberíamos usar) R?
============================================================

- Costo: Software libre

*R es un programa de codigo abierto y gratuito (no requiere licencia como otros softwares). Es decir de acceso libre y que se expande con contribuciones de la comunidad de usuarios, lo que se traduce en paquetes con funciones myu especificas y variadas que veremos*
    
- Potencia (N° herramientas): Comunidad que crea nuevas herramientas (packages) constantemente.

- Accesibilidad al usuario: Lenguaje de Programación R (Antes de 1970)

*Es tremendamente eficiente para el procesamiento de grandes volúmenes de datos.*
    
- R es un lenguaje del tipo "domain-specific language (DSL)" porque sus funciones están pensados para un área de uso o dominio específico
    
*En este caso Está especialmente enfocado en tareas de cómputo y análisis estadístico y gráfico de manera eficiente y sucinta.*
    
-   Versatilidad: Muchas extensiones: [GIS](https://mappinggis.com/2019/02/r-y-gis-que-es-r-y-su-relacion-con-los-sig/), [Quarto](https://quarto.org/), etc.

*y además es un programa muy versátil que permite utilizar la misma herramienta para una gran variedad de fines y aplicaciones.*

## ¿Pará qué podemos usar R?

*COMO ya hemos advertido, principalmente, su importancia radica en que*

- Proporciona una amplia variedad de herramientas para generar visualizaciones y personalización de gráficos de datos de alta calidad, además, junto con Rstudio permiten la automotización de reportes y la replicabilidad de los análisis mediante el uso de scripts.

- Pero también...

  - *Es una herramienta de procesamiento estadístico*: limpieza, manejo, almacenamiento de datos e integración con distintas bases de datos o lenguajes de otros programas (Spss, Python o Stata)

  - *Amplia variedad de técnicas estadísticas para el análisis de datos*: modelos lineales, pruebas estadísticas, análisis de series de tiempo, clasificación, agrupación, enter otros.

  - Posibilidad de creación de librerías propias para trabajos en específico

  - Implementar análisis con algoritmos de Machine Learning, data mining y big data. 
    
  - Web Scraping, generar tableros o aplicaciones como shiny

- Después de lo que se ha expuesto, les animo a que continúen explorando R y sus diversos usos a través de diferentes fuentes, siendo este curso una de ellas.

**INTERFAZ**
============================================================
*Básicamente al trabajar en RStudio, estaremos interacturando con estos 4 paneles. Veamos para qué utilizamos cada uno:*

- **4 paneles (en esentido horario):**

```{r, echo = FALSE, out.width = "115%", fig.align = "center", fig.cap="Fuente: Benites, A... & Rodríguez, A. (2022). PPT curso de POL278 - Estadística para el análisis político 1 - 2022-1"}
knitr::include_graphics("interface.jpg") 
```

**1. Console (La consola)**

- Útil cuando queremos ejecutar porciones de código pequeñas.

*o realizar operaciones matemáticas, o sea, R es como una calculadora avanzada)*

- Podemos realizar cálculos y operaciones matemáticas como una calculadora avanzada.

*Aprovechemos que hay datasets precargados en R*
```{r}
#cars
head(cars)
names(cars) # Nombre de las variables
#table(cars)
str(cars) # Estructura de las variables
```

```{r}
1000454656/256 # Dividir grandes números
10*15 # Multiplicar y realizar otras operaciones matemáticas
pi # Obtener el valor de pi 
```

```{r}
mean(c(1, 2, 3, 4, 5, 6)) # Media de los primeros 6 números naturales
```

*hasta aquí no ma papi*
```{r}
airquality 
library(tidyverse)  
starwars
```

- Visualizar y registrar el output de nuestros códigos

*La consola es la salida de R,podemos ingresar código de R directamente y podemos obervar lo que ocurra al correr el código. A diferencia del script este ouptut se limpia cada vez que abrimos RStudio, es decir, no se guardará como parte de un documento. además, Cuando el código corre bien, veremos letras moradas en la consola y cuando hay un error o una advertencia, en color rojo.         Además, cualquier código que ejecutemos en el script se mostrará en la consola, lo que nos permite llevar un registro de nuestras acciones hechas en el script durante la sesión, a menos que lo borremos con la escoba de aquí xd* 

**2. Script (El editor)**

- Panel en el que se crean y modifican scripts, entre otros tipos de archivos...

*es nuestro cuaderno o bloc de notas digital en el que escribimos las líneas de código de nuestro proyecto y Una vez que guardemos el código, podemos preservar o retomar desde donde lo dejamos en futuras sesiones. Usualmente Se encuentran los archivos o scripts de extensión .R y .Rmd. Si hacemos el símil con Word, en este panel estaría el documento en blanco a editar.*
    
- Diferencias sobre este tipo de archivos: [Script, R Markdown y R Notebook](https://www.youtube.com/watch?v=y7JPGlw6dJg)
  
**3. Environment (El entorno de variables)**

-   Advertimos los objetos creados, pero tambien dataframes, tibbles, listas, entre otros.
     
*podemos visualizar los objetos que hemos creado en R. Más adelante profundizaremos en lo que significan los objetos, por ejemplo, si corres este código en la consola a<-2+2 te aparecerá en tu Environment un vector numérico de valor 4, este vector se ha denominado a.*

*Este es el entorno de R que contiene todos los elementos que hemos generado y creado: valores, bases de datos, objetos, etc. Es el "lugar donde viven" estos elementos, como una especie de alacena que se va llenando a medida que vamos corriendo códigos que definen y modifican elementos. Esa alacena se vacía con cada nueva sesión de RStudio.*
    
    ```{r}
valor_1 <- 5

valor_2 <- 5*5
```

```{r}
print("Hola mundo")
```

```{r}
x <- mean(c(1, 2, 3, 4, 5, 6)) # Numeros del 1 al 6 pueden guardarse en la variable x
```

```{r}
datos <- airquality # La tabla de la calidad del aire en una variable llamada 'datos'
```

-   **¿Qué es una variable?**

    -   Una variable es un espacio en la computadora en el que guardamos un objeto (como una caja con un nombre determinado para guardar cosas).
    
    

4. **Panel de Visualización**
============================================================

- Se encuentran los archivos del usuario como si fuera la carpeta de “Mis Documentos” en Windows. De esta manera podemos acceder fácilmente a archivos de nuestra computadora y de nuestro directorio de trabajo.

nos permite interactuar de forma fácil con los subdirectorios (pestaña Files), visualizar los gráficos que creamos (pestaña Plots), cargar y buscar paquetes manualmente (pestaña Packages), acceder al help de cada función (pestaña Help) y visualizar contenido html (pestaña Viewer). Es una especie de atajo multiuso.

*(Correr el html o pdf)*


5. No olvidemos el **Menú superior**...

    -   *Zoom in, Zoom out*

    -   *Cambiar color de Rstudio*

    -   *Entre otros*




- Ahora sí, comencemos...  *Vamos a configurar nuestro Rstudio**...

# Configuremos RStudio! *(Voluntarios uwu)*

+ Solo algunos cambios para iniciar...

+ Nos dirigirnos al menú superior: "Tools" \> "Global options..." 

  1. "Code" \> "Editing" y marcamos el siguiente cuadro: "Use native pipe operator..."
  
  El operador pipe: ctrl + shift + m <- Nuevo: |> , el antiguo:  %>% <- tienes que llamar la libreria: library(magrittr)


  2. "Code" \> "Display" y marcamos los siguientes cuadros: "Show line numbers", "Highlight R funtion Calls", "Rainbow parentheses".

  3. "Code" \> "Saving" y cambiamos en "Default text encoding:" a "UTF-8"


+ Luego nos dirigimos: "Tools" \> "Global options..." 

  1. "Appereance" \> y... marcamos lo siguiente en cada opción
  
  - RStudio theme: Modern
  
  - Zoom: 175%
   
  - Editor font: Lucida Font
  
  - Editor font size: 10
  
  - Editor theme: Pastel On Dark
  
**Ojo: podemos realizar estos cambios y otros según nuestra curiosidad o interés.**  




# Programando en R
```{r,echo=FALSE, out.width="65%",fig.align="center", fig.cap="Fuente: Benites, A... & Rodríguez, A. (2022). PPT curso de POL278 - Estadística para el análisis político 1 - 2022-1"}
knitr::include_graphics("programando.jpg") 
```


Pero también es importante los reportes:

# Para mejorar nuestros reportes, tomemos en cuenta la sintaxis de Rmd y de casi todos los demás formatos para realizar estos reportes:

  + **bolding words** <- negrita

  + *italicizing words* <- cursiva
 
  + ~~striking through~~ <- tachando 

+ Puedes combinar las anteriores: ***Cuantipol***
  
  + 'comilla simple' <- alt + 3 + 9 <- ''
  
  + `comillas invertidas` <- alt + 9 + 6 <- ``

Para escribir una nueva oración, debemos dejar una linea de código y que no se junte todo en un solo párrafo largo.

````markdown
# Título

## Subtítulo
 
###
````

Cómo estudiar: 

- Realizar comentarios para los comandos que se van a explicar a lo largo del curso: #
```{r}
# Dentro de los chunks también puedo comentar mis códigos, etc.
```

*hacer comentarios en el code chunk o tambien en el scrpit. practicar los ejercicios: COMPRENDER MEJOR: CURIOSIDAD*

es común definir al inicio un apartado en el cual se establece el directorio de trabajo o la carpeta en la que se importarán y exportarán los archivos. Segundo, un área en la que se instalarán todos los paquetes o librerías de extensiones necesarias para ejecutar el código. Tercero, un apartado que incluye toda la data que se utilizará en la investigación. Cuarto, la manipulación de la data en el orden en que aparecen los resultados. Por último, una sección en la que se exporta la data final en el formato indicado.

Como se mencionó anteriormente, programar de manera ordenada no solo es beneficioso para nuestros colegas que revisarán la investigación sino también para nosotros mismos para que en caso revisitemos nuestro código sepamos exactamente para qué servía cada función y con qué intención se había empleado. Es por ello que es de utilidad comentar el código utilizado precisando lo que realiza cada función.

Es necesario comentar que los lenguajes de programación iniciales tienen una amplia influencia anglosajona. En 1963, se creó el ASCII, el cual es un código de caracteres basado en el alfabeto latino, tal como se usa en el inglés moderno [@mackenzie1980]. Sobre este alfabeto, las primeras computadoras IBM incorporaron el estándar ASCII y por extensión también los lenguajes de programación iniciales por lo que muchas veces nos encontraremos con algunos errores de lectura de caracteres especiales como "ñ", "ó", "ü", entre otras. Por lo que se deben considerar los siguientes puntos al manipular la data:

-   Guardar los objetos con nombres cortos, auto-descriptivos, sin espacios, y sin caracteres especiales. Del mismo modo con las variables dentro de los objetos.

-   Revisar en la exportación de la data si los nombres de los objetos y las variables dentro de estas se han exportado exitosamente o ha habido problemas de *encoding*. Por ejemplo, si exportamos a formato `.dta` y tenemos variables con los siguientes nombres podrían aparecer de la siguiente manera:

    | variable   | variable en `.dta` | Correcto nombre de variable |
    |------------|--------------------|-----------------------------|
    | año        | a?o                | year                        |
    | educación  | educaci?n          | edu                         |
    | antigüedad | antig?edad         | antiguedad                  |


## PARA ESCONDER WARNING Y MESSAGE EN TODO EL DOCUMENTO HMTL:
```{r, include=FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
```


```{r}
#chunk básico
```

```{r, include =FALSE,message=FALSE,warning=FALSE}
# include --> para que no aparezca nada del chunk (no: códigos, texto, etc.)
```

```{r, echo =FALSE,message=FALSE,warning=FALSE}
# echo --> para que no aparezca el código, solo el resultado (conveniente para gráficos, mapas, etc.) 
```
  
  
## Atajos útiles de teclado, los más importantes...

- Podemos ver todos los atajos en el **Panel de atajos**: tools \> Keyboard Shortcuts Help <- alt + shift + k

- **Crear code chunk**  <- Ctrl + alt + i 
```{r}

```

- **Correr/ejecutar code** <- Alt + enter  
```{r}
library(tidyverse)
starwars
```

- **Ejecutar linea de código** <- ctrl + enter
```{r}
starwars
cars
```

- **Guardar avance** <- ctrl + s 

- Knitear/renderizar a pdf/hml/etc <- Ctrl + shift + k

- Dar formato ordenado al código <- ctrl + A

- Para comentar múltiples líneas de código: agrega el numeral al lado izquierdo en cada linea de codigo <- ctrl/cmd + shift + c

- Para buscar y reemplazar varias palabras <- ctrl + F

- Reiniciar Rstudio <- ctrl + shift + f10 

- Insertar 'pipe' <- ctrl + shift + m <- `|>` 
  
- Operador de asignación <- alt + - (guion) o también podemos usar: <- 

- Arrastrar línea de código <- alt + up o alt + down

- Para desplazarnos en cada pestaña de los scripts/códigos <- ctrl + alt + (flechas: izquierda o derecha)
  
- Para insertar/crear secciones (títulos) <- ctrl/cmd + shift + R
  

# Algo más: Organización de carpetas

+ Es importante conservar un orden para realizar análisis de datos o una investigación. Se sugiere la siguiente estructura:

+ Nombre de la carpeta principal

  - códigos
  
  - datos
  
    -   original
    -   procesados

  - resultados
    -   tablas
    -   gráficos
    -   Htmls, Pdfs, etc  
    
  - literatura


- Se puede revisar la documentación que suele venir con las funciones de R o también los foros de la comunidad de programadores [StackOverflow](https://stackoverflow.com/) en la que se realizan preguntas puntuales y se vota por la respuesta más eficiente.



*Ahora sí ya estamos listos para meternos de lleno en los conceptos principales de R e ir, en simultaneo, corriendo y probando cada aplicación que vayamos viendo. Esta será la dinámica propuesta para el aprendizaje.*

*Comenzaremos por los elementos fundamentales, para construir desde lo más básico de manera aditiva y progresiva.*

Ahora sí se viene lo chido...




# **Elementos fundamentales**


## **VALORES**

Es el elemento más básico que existe en el entorno de R

5 es un valor numérico

5*6 es también un valor numérico

"dos" es un valor character

"dos días" es también un valor character

FALSE es un valor booleano o lógico



## **Vectores**

Los vectores son una colección de valores

Para agrupar esos valores utilizamos el comando c()

Estos también pueden ser de distinto tipo:

```{r}
c(5, 5*6)
c("dos", "dos días")
c(5*6, "días")
```

### Objetos

- Notar que ninguno de los valores ni vectores anteriores fueron almacenados en un objeto. Si quisiera llamarlos ¿cómo haría?

- Tengo primero que definirlo! Especificando 3 inputs:

  - nombre del objeto

  - utilizar el operador asignación <- (pensarlo como un =)

  - contenido

```{r}
objeto_1 <- 5
objeto_1
## [1] 5
objeto_2 <- 5 * 6
objeto_2
## [1] 30
objeto_3 <- objeto_1 + objeto_2
objeto_3
## [1] 35
```

- Del mismo modo para los vectores:

  - Definir un objeto me permite luego llamarlo para distintas operaciones (lo que se conoce como vectorización)

```{r}
vector_0 <- c(1, 3, 4)
vector_0
## [1] 1 3 4
vector_1 <- vector_0 + 12
vector_1
## [1] 13 15 16
vector_2 <- vector_0 + (12:14)
vector_2
## [1] 13 16 18
```

  - Otros ejemplos con vectores del tipo character

```{r}
ARG_1 <- "muchaaaaaachos,"
ARG_2 <- "ahora nos volvimos a ilusionar"
ARG <- paste(ARG_1, ARG_2)
print(ARG)
```


#### Tipos de datos

- Aparte de los numéricos y character. ¿Qué otro tipo de datos existen?

    | Nombre   | Ejemplo | Name      |
    |----------|---------|-----------|
    | Entero	 | 1	     | Integer   |
    | Numérico | 1.8	   | Numeric   |
    | Caracter | "uno" 	 | Character |
    | Factor   | uno	   | Factor    |
    | Logico   | TRUE	   | Logical   |
    | Perdido  | NA      | Missing   |
    | Vacío    | NULL	   | null      |


¿Cómo podemos conocer qué tipos de datos son? Podemos emplear el comando class() de forma genérica

```{r}
class(5)
## [1] "numeric"
class("ARGENTINA")
## [1] "character"
class(TRUE) 
## [1] "logical"
```



    | Nombre   | Ejemplo | Name      |
    |----------|---------|-----------|
    | Entero	 | 1	     | Integer   |
    | Numérico | 1.8	   | Numeric   |
    | Caracter | "uno" 	 | Character |
    | Factor   | uno	   | Factor    |
    | Logico   | TRUE	   | Logical   |
    | Perdido  | NA      | Missing   |
    | Vacío    | NULL	   | null      |



## **Funciones (comandos)**

Las funciones son comandos, son expresiones que encierran una orden predeterminada.

Al invocar una función le estaremos diciendo a R que realice una tarea particular.

Para ejecutar una función R necesita de dos inputs:

Nombre de la función
Argumento


## **Data Frames (base de datos)**














**En suma...**

- 4 PANELES  

Parece que todo la acción es consecuencia de haber corrido un código. Y es así

En la consola veremos el código en morado si corrió bien y debajo el output o salida como consecuencia de la sentencia

Si el código implica definir un objeto, ese objeto aparecerá ahora en nuestro entorno de trabajo

Si el código implica generar un gráfico lo veremos en ese caso en el panel de navegación

En el script no pasará nada, ya que allí solo escribimos y llamamos al código al momento de correrlo


es común definir al inicio un apartado en el cual se establece el directorio de trabajo o la carpeta en la que se importarán y exportarán los archivos. Segundo, un área en la que se instalarán todos los paquetes o librerías de extensiones necesarias para ejecutar el código. Tercero, un apartado que incluye toda la data que se utilizará en la investigación. Cuarto, la manipulación de la data en el orden en que aparecen los resultados. Por último, una sección en la que se exporta la data final en el formato indicado.


**Referencias**:

- [Bosco Mendoza Vega (2018). R para principiantes. Libro electrónico. ](https://bookdown.org/jboscomendoza/r-principiantes4/)

- [Chiroque, C. (2020). Data Política: Manual R para estadística aplicada al análisis político. Data Política: Lima.](https://christianchiroquer.github.io/ManualdeR/r-un-lenguaje-de-programaci%C3%B3n.html)

- [Hanck, C., Arnold, M., Gerber, A., & Schmelzer, M. (2019). Introduction to Econometrics with R. University of Duisburg-Essen, 1-9.](https://www.econometrics-with-r.org/)

- [Tiscornia Pablo - Introducción al procesamiento de datos con R para Ciencias Sociales. Aplicación práctica en la Encuesta Permanente de Hogares (EPH-INDEC).](https://intro-r-eph.netlify.app/bio.html)

- Qlab. Santiago Sotelo y María Pía van Oordt

- [Weksler, K. & Shokida. Curso de R para procesamiento de datos de la Encuesta Permanente de Hogares](https://diegokoz.github.io/Curso_R_EPH_clases/)

- Wickham, H., & Grolemund, G. (2016). R for data science: import, tidy, transform, visualize, and model data. ” O’Reilly Media, Inc.” [First Edition](https://r4ds.had.co.nz/) y [Second Edition](https://r4ds.hadley.nz/)

**Más recursos**:

- [Trabajo con RMarkdown para reportes reproducibles](https://gorkang.github.io/R_preparacion_visualizacion_datos/trabajo-con-rmarkdown-para-reportes-reproducibles.html)

- [Messy data](https://tidyr.tidyverse.org/)

- [Tidy data](https://tidyr.tidyverse.org/articles/tidy-data.html)

- [The R Graph Gallery](https://r-graph-gallery.com/)

- [R-Ladies Lima](https://www.youtube.com/c/RLadiesLima/videos?app=desktop&view=0&sort=dd&shelf_id=0)

- [Data Wrangling](https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf)

- [Data Transformation](https://github.com/rstudio/cheatsheets/blob/main/data-transformation.pdf)

- [Data Tidyng](https://github.com/rstudio/cheatsheets/blob/main/tidyr.pdf)

- [Data Visualization with ggplot2](https://posit.co/wp-content/uploads/2022/10/data-visualization-1.pdf)

- [Stringr](https://posit.co/wp-content/uploads/2022/10/strings-1.pdf)

- [RStudio-IDE](https://posit.co/wp-content/uploads/2022/10/rstudio-ide-1.pdf)

- [R Markdown](https://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf)

- [Tipos de variables y escalas de medición](https://www.odiolaestadistica.com/estadistica-r/tipos-de-variables/)

- [Pimp my RMD: a few tips for R Markdown](https://holtzy.github.io/Pimp-my-rmd/)

- [ONLY - DATA](https://www.yan-holtz.com/blog.html)

- [Por qué las estadísticas inteligentes son la clave para combatir el crimen](https://www.ted.com/talks/anne_milgram_why_smart_statistics_are_the_key_to_fighting_crime?language=es)



