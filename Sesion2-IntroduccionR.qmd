---
title: "**<b style = 'color : #E34B2A;'>Sesión 2: Introducción al R y Rstudio</b>**"
subtitle: 'Taller de Investigación: Política Cuantitativa "CUANTIPOL" - UNMSM'
author: "Asesor: Joel Belsasar Ccallocunto \n **[@luccemhu](https://github.com/luccemhu)** \n a20196510@pucp.edu.pe"
date: "2023-6-4"
theme:
  dark: darkly
  light: flatly
toc: true
always_allow_html: true
format:
  html:
    mainfont: Georgia
    self-contained: true
---

```{r,echo=FALSE, out.width="65%",fig.align="center"}
knitr::include_graphics("logoCUANTIPOL.png")  # Para plotear cualquier imagen
# Puedes centrar, aumentar o disminuir el tamaño del gráfico (buscar códigos en internet) 
```

*Presentarme, que me llamen por mi nombre. RAAAAAAAAAAAAAAAAAAAAA*

RECOMENDACIONES INICIALES: NO ABRUMARSE, ES APRENDER UN LENGUAJE NUEVO, O SEA, NO VA A SER FACIL. PROGRAMA MUY INTUTIVO

CUALQUIERE DUDA, PREGUNTAR POR CHAT O POR PRIVADO O PRENDER EL MICROFONO O ENVIARME UN CORREO AMÍ O A LOS DEMAS ASESORES.





1. ¿Qué buscamos con el taller?
============================================================
- El objetivo es introducirnos al lenguaje y al uso de R y explorar los usos más comunes y útiles para el análisis de datos.

- No es un curso exhaustivo que abarque las múltiples aplicaciones y posibilidades que se puede aprovechar utilizando R.

        -   Vamos a tratar de hablar "todos el mismo idioma" es decir trabajar sobre los fundamentos, y eso les permitirá luego ir expandiendo su bagaje de R hacia los usos que quieran o necesiten darle.

        -   La estrategia entonces será cubrir lo principal y trataremos de motivar y dar un pantallazo de los temas más avanzados o específicos como herramienta inicial que permita luego profundizar la investigación que desarrollen a lo largo del curso.

        -   Además, les trataré de compartir algunos tips o atajos que me hubiesen gustado conocer cuando comence con R y que espero que sea de mucho provecho para ustedes...

*El siguiente objetivo del taller es su*

-   Proyecto final del taller:

    -   Ejemplos...

        -   En Github: [Determinantes del desempleo juvenil en el mundo](https://luccemhu.github.io/) (CAMBIAR EL NOMBRE DE ESTO JOEL)

        -   En Rpubs: [¿Los países productores de petróleo son los Estados más contaminantes?](https://rpubs.com/LuchoValverde/920711)


*-COMENZAR DESDE AQUI-*


# 1.2 Repasemos la instalación...


# 2. Configurar el directorio de trabajo
 
   - Para importar y exportar nuestra data, es importante tener en cuenta a qué carpeta se están cargando los archivos. Esta carpeta es el Working directory (directorio de trabajo).
 
*R funciona como un entorno temporal de trabajo, esto quiere decir que el usuario va agregando datos y objetos, pero si los análisis no son guardados se deberán repetir las instrucciones para obtener otra vez el resultado. Por esta razón, es preciso configurar una carpeta predeterminada en nuestro ordenador, donde el programa buscará los archivos a ejecutar y guardará los archivos a conservar con cambios.*

- Para encontrar nuestro lugar de trabajo actual, escribimos el siguiente comando (escriba el código en la consola, ya que si lo ejecuta desde este Rmd, obtendrá el lugar donde se encuentra este archivo): `getwd()` (sin las comillas invertidas)

- Si queremos cambiar nuestro directorio de trabajo a uno específico corremos la siguiente
función:
```{r}
#dir() # Ver qué archivos están en el directorio o en el lugar en que se encuentre
#setwd() # Establecer el nuevo directorio
```

- Otra opción para cambiar de directorio de trabajo:

  - Nos dirigirnos al menú “Session” \> “Set Working Directory” \> “Choose Directory”. Esto abrirá una ventana emergente, en la que buscaremos la carpeta en la cual vamos a trabajar, la ubicamos y seleccionamos “Open”. Para verificar el cambio volvemos a digitar la función `getwd()` en la consola.

- Si está en otra subcarpeta:
```{r}
#library(rio)
#data = import("./pavimentandoconvotos.sav") 
# ./ El punto + slash indica que jalaremos la base de una subcarpeta 
```

  - Luego verán otros modos para importar bases de datos directamente desde internet. 

2. ¿Qué es R?
============================================================
+   R es un lenguaje y es un software que permite el análisis estadístico y gráfico.

    + Lenguaje porque tiene su propia sintaxis desde la cual escribir las sentencias y comandos

    + Es un software porque es al mismo tiempo un programa o entorno integrado con múltiples funcionalidades


## ... ¿Y RStudio?

-   Rstudio es un integrated development environment - [IDE](https://posit.co/products/open-source/rstudio/): un interfaz amigable y poderoso para trabajar con R.

    + Es decir, es un entorno de desarrollo integrado para R o como indican en su web, “un set de herramientas integradas para ayudarte a ser más productivo con R”.

# Pero si hay más softwares estadísticos, ¿por qué usamos (o deberíamos usar) R?

-   Costo: Software libre

    + R es un programa de codigo abierto y gratuito (no requiere licencia como otros softwares). Es decir de acceso libre y que se expande con contribuciones de la comunidad de usuarios (paquetes)
    
-   Potencia (N° herramientas): Comunidad que crea nuevas herramientas (packages) constantemente.

    
-   Accesibilidad al usuario: Lenguaje de Programación R (Antes de 1970)


    + Es tremendamente eficiente para el procesamiento de grandes volúmenes de datos.
    
- R es un lenguaje del tipo "domain-specific language (DSL)" porque sus funciones están pensados para un área de uso o dominio específico
    
    + En este caso Está especialmente enfocado en tareas de cómputo y análisis estadístico y gráfico de manera eficiente y sucinta.
    
-   Versatilidad: Muchas extensiones: GIS, Quarto, etc.

    + Es un programa muy versátil que permite utilizar la misma herramienta para una gran variedad de fines y aplicaciones.


## ¿Pará qué podemos usar R?

-   Importante:

    + Ofrece numerosas herramientas para la visualización de datos de alta calidad, así como para la publicación de otros resultados de forma sencilla. R y R Studio proveen la replicabilidad de los análisis mediante scripts.
    
- R y RStudio tiene una amplia variedad de usos como la limpieza, el preprocesamiento de datos, aplicaciones de Machine Learning, minería de datos y big data.

- Manejo y almacenamiento de datos.

- Amplia variedad de técnicas estadísticas (modelos lineales, pruebas estadísticas,

- análisis de series de tiempo, clasificación, agrupación, etc.)

- Utilidades graficas para la visualización de datos.

- Integración con distintas bases de datos o lenguajes de otros programas (Spss,
Python o Stata)

- Diversas herramientas para el análisis de datos.

- Posibilidad de creación de librerías propias para trabajos en especifico


    + Aparte del uso mas convencional como herramienta de procesamiento estadístico, R nos puede servir para...
    + Generar múltiples visualizaciones y personalización de gráficos
    + Web Scraping
    + Automatizar reportes
    + Implementar análisis con algoritmos de Machine Learning
    + Generar tableros o aplicaciones (shiny por ejemplo)
    + Hacer presentaciones (o slides como estas!)
    + Subir y publicar contenido con R-markdown



# INTERFACE
*Básicamente al trabajar en RStudio, estaremos interacturando con estos 4 paneles. Veamos para qué utilizamos cada uno:*

```{r,echo=FALSE, out.width="90%",fig.align="center"}
knitr::include_graphics("interface.jpg") 
```


-   **4 paneles (en esentido horario):**

1.  **Console (La consola)**
============================================================
- visualizar el output de nuestros códigos

    -   Es la salida de R, el lugar donde visualizamos el output, lo que ocurre al correr el código. A diferencia del script este ouptut se limpia cada vez que abrimos RStudio. Cuando el código corre bien, veremos letras moradas en la consola y cuando hay un error o una advertencia, en color rojo. Además, cualquier código que corramos en el script aparecerá en la consola como una manera de llevar un registro durante la sesión. 
    
- Útil cuando queremos ejecutar porciones de código pequeñas.

    -   podemos ingresar código de R directamente en la consola, pero que a diferencia del script no se guardará como parte de un documento. pero es útil cuando queremos ejecutar porciones de código pequeñas o realizar operaciones matemáticas (R es como una calculadora…pro).

- Podemos realizar cálculos y operaciones matemáticas como una calculadora avanzada.


*Correr esto en el Console:*

1.
```{r}
mean(c(1, 2, 3, 4, 5, 6))
```

2.
```{r}
#names(starwars) # Nombre de las variables
#str(starwars) # Estructura de las variables
```
3.
```{r}
1000454656/256
pi
```

Tambien podemos llamar dataset precargadas en R como...

```{r}
cars

# chickens
```

```{r}
library(tidyverse)  
starwars
```

```{r}
airquality 
head(airquality)
```

2.  ** Script (El editor)**
============================================================
-   Panel en el que nos encontramos ahora. Aquí se crean y modifican scripts, entre otros tipos de archivos...
    
    -   Se encuentran los archivos o scripts (usualmente extensión .R y .Rmd) en los cuales podemos escribir código que queremos preservar o revisar más adelante. Si hacemos la analogía con Office Word, en el panel 1 estaría el documento en blanco a editar.
    
    Es nuestro cuaderno, nuestro block de notas. Allí escribimos las líneas de códigos de nuestro proyecto y una vez que lo guardemos podremos volver a retomar desde donde dejamos. Desde el script podremos correr estos códigos directamente. Para comenzar un script vamos a File --> New File --> R Script. Para abrir un script guardado vamos a File --> Open File

- Más sobre los tipos de archivos: 

  - [📑Script, R Markdown y R Notebook 📓: Principales diferencias](https://www.youtube.com/watch?v=y7JPGlw6dJg)
  
  - [Como crear un pdf en R Markdown sin instalar LaTeX](https://www.youtube.com/watch?v=vyqCebNkreI)


3.  **Environment (El entorno de variables)**
============================================================
-   Advertimos los objetos creados, pero tambien dataframes, tibbles, listas, entre otros.
     
    -   podemos visualizar los objetos que hemos creado en R. Más adelante profundizaremos en lo que significan los objetos, por ejemplo, si corres este código en la consola a<-2+2 te aparecerá en tu Environment un vector numérico de valor 4, este vector se ha denominado a.
     Este es el entorno de R que contiene todos los elementos que hemos generado y creado: valores, bases de datos, objetos, etc. Es el "lugar donde viven" estos elementos, como una especie de alacena que se va llenando a medida que vamos corriendo códigos que definen y modifican elementos. Esa alacena se vacía con cada nueva sesión de RStudio.
    
```{r}
x <- mean(c(1, 2, 3, 4, 5, 6)) # Numeros del 1 al 6 pueden guardarse en la variable x
```

```{r}
datos <- airquality # La tabla de la calidad del aire en una variable llamada 'datos'
```

-   **¿Qué es una variable?**

    -   Una variable es un espacio en la computadora en el que guardamos un objeto (como una caja con un nombre determinado para guardar cosas).
    
    

4. **Panel de Visualización**
============================================================

- Se encuentran los archivos del usuario como si fuera la carpeta de “Mis Documentos” en Windows. De esta manera podemos acceder fácilmente a archivos de nuestra computadora y de nuestro directorio de trabajo.

nos permite interactuar de forma fácil con los subdirectorios (pestaña Files), visualizar los gráficos que creamos (pestaña Plots), cargar y buscar paquetes manualmente (pestaña Packages), acceder al help de cada función (pestaña Help) y visualizar contenido html (pestaña Viewer). Es una especie de atajo multiuso.

*(Correr el html o pdf)*


5. No olvidemos el **Menú superior**...

    -   *Zoom in, Zoom out*

    -   *Cambiar color de Rstudio*

    -   *Entre otros*




- Ahora sí, comencemos...  *Vamos a configurar nuestro Rstudio**...

# Configuremos RStudio! *(Voluntarios uwu)*

+ Solo algunos cambios para iniciar...

+ Nos dirigirnos al menú superior: "Tools" \> "Global options..." 

  1. "Code" \> "Editing" y marcamos el siguiente cuadro: "Use native pipe operator..."
  
  El operador pipe: ctrl + shift + m <- Nuevo: |> , el antiguo:  %>% <- tienes que llamar la libreria: library(magrittr)


  2. "Code" \> "Display" y marcamos los siguientes cuadros: "Show line numbers", "Highlight R funtion Calls", "Rainbow parentheses".

  3. "Code" \> "Saving" y cambiamos en "Default text encoding:" a "UTF-8"


+ Luego nos dirigimos: "Tools" \> "Global options..." 

  1. "Appereance" \> y... marcamos lo siguiente en cada opción
  
  - RStudio theme: Modern
  
  - Zoom: 175%
   
  - Editor font: Lucida Font
  
  - Editor font size: 10
  
  - Editor theme: Pastel On Dark
  
**Ojo: podemos realizar estos cambios y otros según nuestra curiosidad o interés.**  



*Ahora sí ya estamos listos para meternos de lleno en los conceptos principales de R e ir, en simultaneo, corriendo y probando cada aplicación que vayamos viendo. Esta será la dinámica propuesta para el aprendizaje.*

*Comenzaremos por los elementos fundamentales, para construir desde lo más básico de manera aditiva y progresiva.*

Ahora sí se viene lo chido...






# Programando en R
```{r,echo=FALSE, out.width="65%",fig.align="center", fig.cap="Fuente: Benites, A... & Rodríguez, A. (2022). PPT curso de POL278 - Estadística para el análisis político 1 - 2022-1"}
knitr::include_graphics("programando.jpg") 
```


Pero también es importante los reportes:

# Para mejorar nuestros reportes, tomemos en cuenta la sintaxis de Rmd y de casi todos los demás formatos para realizar estos reportes:

  + **bolding words** <- negrita

  + *italicizing words* <- cursiva
 
  + ~~striking through~~ <- tachando 

+ Puedes combinar las anteriores: ***Cuantipol***
  
  + 'comilla simple' <- alt + 3 + 9 <- ''
  
  + `comillas invertidas` <- alt + 9 + 6 <- ``

Para escribir una nueva oración, debemos dejar una linea de código y que no se junte todo en un solo párrafo largo.

````markdown
# Título

## Subtítulo
 
###
````

Cómo estudiar: 

- Realizar comentarios para los comandos que se van a explicar a lo largo del curso: #
```{r}
# Dentro de los chunks también puedo comentar mis códigos, etc.
```

*hacer comentarios en el code chunk o tambien en el scrpit. practicar los ejercicios: COMPRENDER MEJOR: CURIOSIDAD*

es común definir al inicio un apartado en el cual se establece el directorio de trabajo o la carpeta en la que se importarán y exportarán los archivos. Segundo, un área en la que se instalarán todos los paquetes o librerías de extensiones necesarias para ejecutar el código. Tercero, un apartado que incluye toda la data que se utilizará en la investigación. Cuarto, la manipulación de la data en el orden en que aparecen los resultados. Por último, una sección en la que se exporta la data final en el formato indicado.

Como se mencionó anteriormente, programar de manera ordenada no solo es beneficioso para nuestros colegas que revisarán la investigación sino también para nosotros mismos para que en caso revisitemos nuestro código sepamos exactamente para qué servía cada función y con qué intención se había empleado. Es por ello que es de utilidad comentar el código utilizado precisando lo que realiza cada función.

Es necesario comentar que los lenguajes de programación iniciales tienen una amplia influencia anglosajona. En 1963, se creó el ASCII, el cual es un código de caracteres basado en el alfabeto latino, tal como se usa en el inglés moderno [@mackenzie1980]. Sobre este alfabeto, las primeras computadoras IBM incorporaron el estándar ASCII y por extensión también los lenguajes de programación iniciales por lo que muchas veces nos encontraremos con algunos errores de lectura de caracteres especiales como "ñ", "ó", "ü", entre otras. Por lo que se deben considerar los siguientes puntos al manipular la data:

-   Guardar los objetos con nombres cortos, auto-descriptivos, sin espacios, y sin caracteres especiales. Del mismo modo con las variables dentro de los objetos.

-   Revisar en la exportación de la data si los nombres de los objetos y las variables dentro de estas se han exportado exitosamente o ha habido problemas de *encoding*. Por ejemplo, si exportamos a formato `.dta` y tenemos variables con los siguientes nombres podrían aparecer de la siguiente manera:

    | variable   | variable en `.dta` | Correcto nombre de variable |
    |------------|--------------------|-----------------------------|
    | año        | a?o                | year                        |
    | educación  | educaci?n          | edu                         |
    | antigüedad | antig?edad         | antiguedad                  |




  
## PARA ESCONDER WARNING Y MESSAGE EN TODO EL DOCUMENTO HMTL:
```{r, include=FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
```


```{r}
#chunk básico
```

```{r, include =FALSE,message=FALSE,warning=FALSE}
# include --> para que no aparezca nada del chunk (no: códigos, texto, etc.)
```

```{r, echo =FALSE,message=FALSE,warning=FALSE}
# echo --> para que no aparezca el código, solo el resultado (conveniente para gráficos, mapas, etc.) 
```
  
  
## Atajos útiles de teclado, los más importantes...

- Podemos ver todos los atajos en el **Panel de atajos**: tools \> Keyboard Shortcuts Help <- alt + shift + k

- **Crear code chunk**  <- Ctrl + alt + i 
```{r}

```

- **Correr/ejecutar code** <- Alt + enter  
```{r}
library(tidyverse)
starwars
```

- **Ejecutar linea de código** <- ctrl + enter
```{r}
starwars
cars
```

- **Guardar avance** <- ctrl + s 

- Knitear/renderizar a pdf/hml/etc <- Ctrl + shift + k

- Dar formato ordenado al código <- ctrl + A

- Para comentar múltiples líneas de código: agrega el numeral al lado izquierdo en cada linea de codigo <- ctrl/cmd + shift + c

- Para buscar y reemplazar varias palabras <- ctrl + F

- Reiniciar Rstudio <- ctrl + shift + f10 

- Insertar 'pipe' <- ctrl + shift + m <- `|>` 
  
- Operador de asignación <- alt + - (guion) o también podemos usar: <- 

- Arrastrar línea de código <- alt + up o alt + down

- Para desplazarnos en cada pestaña de los scripts/códigos <- ctrl + alt + (flechas: izquierda o derecha)
  
- Para insertar/crear secciones (títulos) <- ctrl/cmd + shift + R
  

# Algo más: Organización de carpetas

+ Es importante conservar un orden para realizar análisis de datos o una investigación. Se sugiere la siguiente estructura:

+ Nombre de la carpeta principal

  - códigos
  
  - datos
  
    -   original
    -   procesados

  - resultados
    -   tablas
    -   gráficos
    -   Htmls, Pdfs, etc  
    
  - literatura


- Se puede revisar la documentación que suele venir con las funciones de R o también los foros de la comunidad de programadores [StackOverflow](https://stackoverflow.com/) en la que se realizan preguntas puntuales y se vota por la respuesta más eficiente.




**En suma...**

- 4 PANELES  

Parece que todo la acción es consecuencia de haber corrido un código. Y es así

En la consola veremos el código en morado si corrió bien y debajo el output o salida como consecuencia de la sentencia

Si el código implica definir un objeto, ese objeto aparecerá ahora en nuestro entorno de trabajo

Si el código implica generar un gráfico lo veremos en ese caso en el panel de navegación

En el script no pasará nada, ya que allí solo escribimos y llamamos al código al momento de correrlo






**Referencias**:

-   Youtube

- Qlab. Santiago Sotelo y María Pía van Oordt


- Coursera

- DATAPOLITICA

CITAR OTROS MÁS

- Wickham, H., y Grolemund, G. (2016). R for data science: import, tidy, transform, visualize, and model data. ” O’Reilly Media, Inc.” [First Edition](https://r4ds.had.co.nz/) [Second Edition](https://r4ds.hadley.nz/)

- [Hanck, C., Arnold, M., Gerber, A., y Schmelzer, M. (2019). Introduction to Econometrics with R. University of Duisburg-Essen, 1-9.](https://www.econometrics-with-r.org/)

- [Bosco Mendoza Vega (2018). R para principiantes. Libro electrónico. ](https://bookdown.org/jboscomendoza/r-principiantes4/)

- [Tiscornia Pablo - Introducción al procesamiento de datos con R para Ciencias Sociales. Aplicación práctica en la Encuesta Permanente de Hogares (EPH-INDEC).](https://intro-r-eph.netlify.app/bio.html)

- [Weksler, Kozlowski y Shokida. Curso de R para procesamiento de datos de la Encuesta Permanente de Hogares](https://diegokoz.github.io/Curso_R_EPH_clases/)


Más recursos:

- [Trabajo con RMarkdown para reportes reproducibles](https://gorkang.github.io/R_preparacion_visualizacion_datos/trabajo-con-rmarkdown-para-reportes-reproducibles.html)

- [Messy data](https://tidyr.tidyverse.org/)

- [Tidy data](https://tidyr.tidyverse.org/articles/tidy-data.html)

- [The R Graph Gallery](https://r-graph-gallery.com/)

- [R-Ladies Lima](https://www.youtube.com/c/RLadiesLima/videos?app=desktop&view=0&sort=dd&shelf_id=0)

- [Data Wrangling](https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf)

- [Data Transformation](https://github.com/rstudio/cheatsheets/blob/main/data-transformation.pdf)

- [Data Tidyng](https://github.com/rstudio/cheatsheets/blob/main/tidyr.pdf)

- [Data Visualization with ggplot2](https://posit.co/wp-content/uploads/2022/10/data-visualization-1.pdf)

- [Stringr](https://posit.co/wp-content/uploads/2022/10/strings-1.pdf)

- [RStudio-IDE](https://posit.co/wp-content/uploads/2022/10/rstudio-ide-1.pdf)

- [R Markdown](https://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf)





## PARA DUDAS FRECUENTES:
https://www.odiolaestadistica.com/estadistica-r/tipos-de-variables/


  - Data Política: Manual de R para estadística aplicada al análisis político:
https://christianchiroquer.github.io/ManualdeR/r-un-lenguaje-de-programaci%C3%B3n.html

Chiroque, Christian (2020) Data Política: Manual R para estadística aplicada al análisis político. Data Política: Lima. Link

## MÁS TIPS PARA EMBELLECER la apariencia de mis resultados html:  
https://holtzy.github.io/Pimp-my-rmd/


## PARA OTROS TIPS:
https://www.yan-holtz.com/blog.html


Por qué las estadísticas inteligentes son la clave para combatir el crimen
https://www.ted.com/talks/anne_milgram_why_smart_statistics_are_the_key_to_fighting_crime?language=es



